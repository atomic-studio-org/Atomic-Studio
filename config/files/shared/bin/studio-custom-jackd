#!/usr/bin/env -S nu

let USER_JACKD_ENABLED = $"($env.XDG_CONFIG_HOME)/atomic-studio/jack/user_custom_jackd"
let SYSTEM_JACKD_SCRIPT_PATH = "/usr/libexec/studio-jackd-default"
let DEFAULT_CUSTOM_SCRIPT_PATH = $"($env.XDG_CONFIG_HOME)/atomic-studio/jack/custom-jackd.nu"

let DEFAULT_SCRIPT = "#!/usr/bin/env -S nu
jack_control start
jack_control ds alsa
jack_control dps rate 48000
jack_control dps nperiods 2
jack_control dps period 64
sleep 5sec
a2j_control --ehw
a2j_control --start
sleep 5sec
qjackctl &"

# Do not use the users jackd script instead of the predefined system script
def "main disable-user" [] {
  if not ($USER_JACKD_ENABLED | path exists) {
    echo "Custom JackD script for the user not enabled"
    exit 0
  }

  rm $USER_JACKD_ENABLED
  echo "Sucessfully disabled custom user jack script"
}

# Use the users jackd script instead of the predefined system script
def "main enable-user" [] {
  if ($USER_JACKD_ENABLED | path exists) {
    echo "Custom JackD script for the user already is enabled"
    exit 0
  }

  mkdir ($DEFAULT_CUSTOM_SCRIPT_PATH | path dirname)
  touch $USER_JACKD_ENABLED
  $DEFAULT_SCRIPT | save -f $DEFAULT_CUSTOM_SCRIPT_PATH
  echo "Sucessfully enabled custom user jack script"
}

# Run jackd with a specific script
def "main" [
  --entrypoint (-e): string # Entrypoint script for running jackd (default: ~/.config/atomic-studio/jack/custom-jackd.nu)
  ...args # Arguments that will be passed to the script
] {
  mut entrypoint_path = ""
  if $entrypoint == null {
    # There is something very... wrong with this but it seems to work?
    if ($USER_JACKD_ENABLED | path exists) {   
      $entrypoint_path = $SYSTEM_JACKD_SCRIPT_PATH 
    } else {
      $entrypoint_path = $DEFAULT_CUSTOM_SCRIPT_PATH
    }
  }

  if not ($entrypoint_path | path exists) {
    mkdir ($entrypoint_path | path dirname)
    $DEFAULT_SCRIPT | save -f $entrypoint_path
    chmod +x $entrypoint_path
  }

  run-external $entrypoint_path ...$args
}
